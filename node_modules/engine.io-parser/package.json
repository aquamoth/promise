{
  "_from": "engine.io-parser@1.2.4",
  "_id": "engine.io-parser@1.2.4",
  "_location": "/engine.io-parser",
  "_nodeVersion": "4.2.2",
  "_npmUser": {
    "name": "rauchg",
    "email": "rauchg@gmail.com"
  },
  "_npmVersion": "3.4.1",
  "_phantomChildren": {},
  "_requiredBy": [
    "/engine.io",
    "/engine.io-client"
  ],
  "_resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-1.2.4.tgz",
  "_shasum": "e0897b0bf14e792d4cd2a5950553919c56948c42",
  "browser": "./lib/browser.js",
  "bugs": {
    "url": "https://github.com/Automattic/engine.io-parser/issues"
  },
  "dependencies": {
    "after": "0.8.1",
    "arraybuffer.slice": "0.0.6",
    "base64-arraybuffer": "0.1.2",
    "blob": "0.0.4",
    "has-binary": "0.1.6",
    "utf8": "2.1.0"
  },
  "description": "Parser for the client for the realtime Engine",
  "devDependencies": {
    "expect.js": "0.3.1",
    "mocha": "2.2.5",
    "zuul": "3.7.3",
    "zuul-ngrok": "3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e0897b0bf14e792d4cd2a5950553919c56948c42",
    "tarball": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-1.2.4.tgz"
  },
  "gitHead": "ca248c5238a42d8383a4ab7de347adc2578abeac",
  "homepage": "https://github.com/Automattic/engine.io-parser",
  "maintainers": [
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "engine.io-parser",
  "optionalDependencies": {},
  "readme": "\r\n# engine.io-parser\r\n\r\n[![Build Status](https://secure.travis-ci.org/socketio/engine.io-parser.svg)](http://travis-ci.org/socketio/engine.io-parser)\r\n[![NPM version](https://badge.fury.io/js/engine.io-parser.svg)](http://badge.fury.io/js/engine.io-parser)\r\n\r\nThis is the JavaScript parser for the engine.io protocol encoding,\r\nshared by both\r\n[engine.io-client](https://github.com/socketio/engine.io-client) and\r\n[engine.io](https://github.com/socketio/engine.io).\r\n\r\n## How to use\r\n\r\n### Standalone\r\n\r\nThe parser can encode/decode packets, payloads, and payloads as binary\r\nwith the following methods: `encodePacket`, `decodePacket`, `encodePayload`,\r\n`decodePayload`, `encodePayloadAsBinary`, `decodePayloadAsBinary`.\r\n\r\nThe browser-side parser also includes `encodePayloadAsArrayBuffer` and `encodePayloadAsBlob`.\r\n\r\nExample:\r\n\r\n```js\r\nvar parser = require('engine.io-parser');\r\n\r\nvar data = new Buffer(5);\r\nfor (var i = 0; i < data.length; i++) { data[i] = i; }\r\n\r\nparser.encodePacket({ type: 'message', data: data }, function(encoded) {\r\n  var decodedData = parser.decodePacket(encoded); // { type: 'message', data: data }\r\n});\r\n```\r\n\r\n### With browserify\r\n\r\nEngine.IO Parser is a commonjs module, which means you can include it by using\r\n`require` on the browser and package using [browserify](http://browserify.org/):\r\n\r\n1. install the parser package\r\n\r\n    ```shell\r\n    npm install engine.io-parser\r\n    ```\r\n\r\n1. write your app code\r\n\r\n    ```js\r\n    var parser = require('engine.io-parser');\r\n\r\n    var testBuffer = new Int8Array(10);\r\n    for (var i = 0; i < testBuffer.length; i++) testBuffer[i] = i;\r\n\r\n    var packets = [{ type: 'message', data: testBuffer.buffer }, { type: 'message', data: 'hello' }];\r\n\r\n    parser.encodePayload(packets, function(encoded) {\r\n      parser.decodePayload(encoded,\r\n        function(packet, index, total) {\r\n          var isLast = index + 1 == total;\r\n          if (!isLast) {\r\n            var buffer = new Int8Array(packet.data); // testBuffer\r\n          } else {\r\n            var message = packet.data; // 'hello'\r\n          }\r\n        });\r\n    });\r\n    ```\r\n\r\n1. build your app bundle\r\n\r\n    ```bash\r\n    $ browserify app.js > bundle.js\r\n    ```\r\n\r\n1. include on your page\r\n\r\n    ```html\r\n    <script src=\"/path/to/bundle.js\"></script>\r\n    ```\r\n\r\n## Features\r\n\r\n- Runs on browser and node.js seamlessly\r\n- Runs inside HTML5 WebWorker\r\n- Can encode and decode packets\r\n  - Encodes from/to ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node\r\n\r\n## API\r\n\r\nNote: `cb(type)` means the type is a callback function that contains a parameter of type `type` when called.\r\n\r\n### Node\r\n\r\n- `encodePacket`\r\n    - Encodes a packet.\r\n    - **Parameters**\r\n      - `Object`: the packet to encode, has `type` and `data`.\r\n        - `data`: can be a `String`, `Number`, `Buffer`, `ArrayBuffer`\r\n      - `Boolean`: optional, binary support\r\n      - `Function`: callback, returns the encoded packet (`cb(String)`)\r\n- `decodePacket`\r\n    - Decodes a packet. Data also available as an ArrayBuffer if requested.\r\n    - Returns data as `String` or (`Blob` on browser, `ArrayBuffer` on Node)\r\n    - **Parameters**\r\n      - `String` | `ArrayBuffer`: the packet to decode, has `type` and `data`\r\n      - `String`: optional, the binary type\r\n\r\n- `encodeBase64Packet`\r\n    - Encodes a packet with binary data in a base64 string (`String`)\r\n    - **Parameters**\r\n      - `Object`: the packet to encode, has `type` and `data`\r\n      - `Function`: callback, returns the base64 encoded message (`cb(String)`)\r\n- `decodeBase64Packet`\r\n    - Decodes a packet encoded in a base64 string.\r\n    - **Parameters**\r\n      - `String`: the base64 encoded message\r\n      - `String`: optional, the binary type\r\n\r\n- `encodePayload`\r\n    - Encodes multiple messages (payload).\r\n    - If any contents are binary, they will be encoded as base64 strings. Base64\r\n      encoded strings are marked with a b before the length specifier\r\n    - **Parameters**\r\n      - `Array`: an array of packets\r\n      - `Boolean`: optional, binary support\r\n      - `Function`: callback, returns the encoded payload (`cb(String)`)\r\n- `decodePayload`\r\n    - Decodes data when a payload is maybe expected. Possible binary contents are\r\n      decoded from their base64 representation.\r\n    - **Parameters**\r\n      - `String`: the payload\r\n      - `String`: optional, the binary type\r\n      - `Function`: callback, returns (cb(`Object`: packet, `Number`:packet index, `Number`:packet total))\r\n\r\n- `encodePayloadAsBinary`\r\n    - Encodes multiple messages (payload) as binary.\r\n    - **Parameters**\r\n      - `Array`: an array of packets\r\n      - `Function`: callback, returns the encoded payload (`cb(Buffer)`)\r\n- `decodePayloadAsBinary`\r\n    - Decodes data when a payload is maybe expected. Strings are decoded by\r\n      interpreting each byte as a key code for entries marked to start with 0. See\r\n      description of encodePayloadAsBinary.\r\n    - **Parameters**\r\n      - `Buffer`: the buffer\r\n      - `String`: optional, the binary type\r\n      - `Function`: callback, returns the decoded packet (`cb(Object)`)\r\n\r\n### Browser\r\n\r\n- `encodePayloadAsArrayBuffer`\r\n    - Encodes multiple messages (payload) as binary.\r\n    - **Parameters**\r\n      - `Array`: an array of packets\r\n      - `Function`: callback, returns the encoded payload (`cb(ArrayBuffer)`)\r\n- `encodePayloadAsBlob`\r\n    - Encodes multiple messages (payload) as blob.\r\n    - **Parameters**\r\n      - `Array`: an array of packets\r\n      - `Function`: callback, returns the encoded payload (`cb(Blob)`)\r\n\r\n## Tests\r\n\r\nStandalone tests can be run with `make test` which will run both node.js and browser tests.\r\n\r\nBrowser tests are run using [zuul](https://github.com/defunctzombie/zuul).\r\n(You must have zuul setup with a saucelabs account.)\r\n\r\nYou can run the tests locally using the following command:\r\n\r\n```\r\n./node_modules/.bin/zuul --local 8080 -- test/index.js\r\n```\r\n\r\n## Support\r\n\r\nThe support channels for `engine.io-parser` are the same as `socket.io`:\r\n  - irc.freenode.net **#socket.io**\r\n  - [Google Groups](http://groups.google.com/group/socket_io)\r\n  - [Website](http://socket.io)\r\n\r\n## Development\r\n\r\nTo contribute patches, run tests or benchmarks, make sure to clone the\r\nrepository:\r\n\r\n```bash\r\ngit clone git://github.com/LearnBoost/engine.io-parser.git\r\n```\r\n\r\nThen:\r\n\r\n```bash\r\ncd engine.io-parser\r\nnpm install\r\n```\r\n\r\nSee the `Tests` section above for how to run tests before submitting any patches.\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Automattic/engine.io-parser.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.2.4"
}
