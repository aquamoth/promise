{
  "name": "simplebuild-jshint",
  "version": "1.3.0",
  "engines": {
    "node": ">=0.10"
  },
  "description": "A simple library for automating JSHint",
  "main": "src/index.js",
  "scripts": {
    "test": "jake"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jamesshore/simplebuild-jshint.git"
  },
  "keywords": [
    "simplebuild",
    "jshint",
    "lint"
  ],
  "author": {
    "name": "James Shore"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jamesshore/simplebuild-jshint/issues"
  },
  "homepage": "https://github.com/jamesshore/simplebuild-jshint",
  "devDependencies": {
    "chai": "^3.4.1",
    "gaze": "^0.5.1",
    "jake": "~8.0.12",
    "jshint": "^2.9.1-rc1",
    "mocha": "~2.3.4",
    "test-console": "^1.0.0"
  },
  "dependencies": {
    "async": "^1.5.0",
    "simplebuild": "^0.5.0",
    "worker-farm": "^1.3.1"
  },
  "peerDependencies": {
    "jshint": "*"
  },
  "readme": "# Simplebuild-JSHint\n\nA simple library for automating JSHint. Now with multi-core capability.\n\n[JSHint](http://www.jshint.com/) is a static analysis (\"lint\") tool for JavaScript. It analyzes JavaScript source code for common mistakes. This library provides a simple interface to JSHint that's convenient to use with task automation tools such as [Grunt](http://gruntjs.com/) or [Jake](https://github.com/mde/jake).\n\nWhen you're linting a lot of files, this library will run JSHint across multiple cores. JSHint is CPU-bound, so this can result in a big speed boost. It only happens when you have a lot of files to lint (35 or more at the time of this writing) because spawning worker processes is slow.\n\n\n## Installation\n\nThis is a Node.js library. Install Node, then:\n\n`npm install simplebuild-jshint` (add `--save` or `--save-dev` if you want)\n\nNote that this library uses your existing JSHint installation. (JSHint will be installed if needed.)\n\n\n## Usage\n\nThis library provides these functions:\n\n* `checkFiles`: Run JSHint against a list of files.\n* `checkOneFile`: Run JSHint against a single file (it's useful for auto-generated build dependencies).\n* `checkCode`: Run JSHint against raw source code.\n\n### `checkFiles(options, success, failure)`\n\nRun JSHint against a list of files. A dot will be written to stdout for each file processed. Any errors will be written to stdout. When there are a large number of files to process, additional worker processes will be spawned to take advantage of additional CPU cores.\n\n* `options`: an object containing the following properties:\n    * `files`: a string or array containing the files to check. Globs (`*`) and globstars (`**`) will be expanded to match files and directory trees respectively. Prepend `!` to exclude files.\n    * `options` (optional): JSHint options (see [the JSHint documentation](http://www.jshint.com/docs/options/)).\n    * `globals` (optional): Permitted global variables (for use with the `undef` option). Each variable should be set to `true` or `false`. If false, the variable is considered read-only.\n\n* `success()`: a function to call if the code validates successfully.\n\n* `failure(message)`: a function to call if the code does not validate successfully. A simple error message is provided in the `message` parameter, but detailed error messages are written to stdout.\n\n### `checkOneFile(options, success, failure)`\n\nRun JSHint against a single file (it's useful for auto-generated build dependencies).\n\n* `options`: an object containing the following properties:\n    * `file`: a string containing the path to the file to check.\n    * `options` (optional): JSHint options (see [the JSHint documentation](http://www.jshint.com/docs/options/)).\n    * `globals` (optional): Permitted global variables (for use with the `undef` option). Each variable should be set to `true` or `false`. If false, the variable is considered read-only.\n\n* `success()`: a function to call if the code validates successfully.\n\n* `failure(message)`: a function to call if the code does not validate successfully. A simple error message is provided in the `message` parameter, but detailed error messages are written to stdout.\n\n### `checkCode(options, success, failure)`\n\nRun JSHint against raw source code. Any errors will be written to stdout.\n\n* `options`: an object containing the following properties:\n    * `code`: a string containing the source code to check.\n    * `options` (optional): JSHint options (see [the JSHint documentation](http://www.jshint.com/docs/options/)).\n    * `globals` (optional): Permitted global variables (for use with the `undef` option). Each variable should be set to `true` or `false`. If false, the variable is considered read-only.\n\n* `success()` a function to call if the code validates successfully.\n\n* `failure(message)` a function to call if the code does not validate successfully. A simple error message is provided in the `message` parameter, but detailed error messages are output to stdout.\n\n\n## Examples\n\nThis library is designed to be easy to integrate with any task automation tool:\n\n### Grunt\n\n```javascript\nvar jshint = require(\"simplebuild-jshint\");\n\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n        jshint: {\n            files: [ \"*.js\", \"src/**/*.js\", \"test/**/*.js\" ],\n            options: {\n                bitwise: true,\n                curly: false,\n                eqeqeq: true\n                // etc\n            }\n        }\n    });\n\n    grunt.registerTask(\"lint\", \"Lint everything\", function() {\n        jshint.checkFiles(grunt.config(\"jshint\"), this.async(), grunt.warn);\n    });\n\n    grunt.registerTask(\"default\", [ \"lint\" ]);\n};\n```\n\n### Jake\n\n```javascript\nvar jshint = require(\"simplebuild-jshint\");\n\ntask(\"default\", [ \"lint\" ]);\n\ntask(\"lint\", function() {\n    jshint.checkFiles({\n        files: [ \"*.js\", \"src/**/*.js\", \"test/**/*.js\" ],\n        options: {\n            bitwise: true,\n            curly: false,\n            eqeqeq: true\n            // etc\n        }\n    }, complete, fail);\n}, { async: true });\n```\n\n### Plain JavaScript\n\n```javascript\nvar jshint = require(\"simplebuild-jshint\");\n\njshint.checkFiles({\n    files: [ \"*.js\", \"src/**/*.js\", \"test/**/*.js\" ],\n    options: {\n        bitwise: true,\n        curly: false,\n        eqeqeq: true\n        // etc\n    }\n}, function() {\n    console.log(\"OK\");\n}, function(message) {\n    console.log(message);\n});\n```\n\n## About Simplebuild\n\nThis library is a simplebuild module. In addition to being used as a standalone library (as described above), it can also be used with simplebuild extensions and mappers. For more information about simplebuild, see [the Simplebuild GitHub page](https://github.com/jamesshore/simplebuild).\n\n\n## Version History\n\n__1.3.0:__ `checkFiles()` uses multiple cores when a lot of files need linting. This can result in a big speed boost.\n\n__1.2.0:__ `checkFiles()` reads files asynchronously and in parallel, which makes it a bit faster.\n\n__1.1.0:__ Better error messages when `options` parameter is incorrect.  \n\n__1.0.1:__ Fix: doesn't try to report non-existent error codes (they're not present in old versions of JSHint).\n\n__1.0.0:__ Reports warning codes (and error codes) so they can be disabled more easily.\n\n__0.3.1:__ Fix: crashed when error objects had no evidence (first seen in JSHint 2.8.0).\n\n__0.3.0:__ Added `jshint` as a peer dependency. It no longer needs to be installed separately.\n\n__0.2.0:__ `checkOneFile()`.\n\n__0.1.1:__ Corrected documentation error: options.globals is not actually a JSHint option.\n\n__0.1.0:__ `checkSource()` and `checkFiles()`.\n\n\n## Contributors\n\nCreated by James Shore.\n\n### Release Process\n\n1. Update version history in readme and check in\n2. Ensure clean build: `./jake.sh`\n3. Remove temporary branches: `git branch`, `git branch -d [branch]`\n4. Update npm version: `npm version [major|minor|patch]`\n5. Release to npm: `npm publish`\n6. Release to github: `git push && git push --tags`\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2012-2015 James Shore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "5b2f493fd2c216ac80affadf7006ce403d0f2781",
  "_id": "simplebuild-jshint@1.3.0",
  "_shasum": "d3b1ac5ddc91cdcc7a376da8219a81bd62368813",
  "_from": "simplebuild-jshint@1.3.0"
}
