{
  "_from": "once@>=1.3.0 <2.0.0",
  "_id": "once@1.4.0",
  "_location": "/once",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/once-1.4.0.tgz_1473196269128_0.537820661207661"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requiredBy": [
    "/glob",
    "/inflight"
  ],
  "_resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
  "_shasum": "583b1aa775961d4b113ac17d9c50baef9dd76bd1",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/once/issues"
  },
  "dependencies": {
    "wrappy": "1"
  },
  "description": "Run a function exactly one time",
  "devDependencies": {
    "tap": "^7.0.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "583b1aa775961d4b113ac17d9c50baef9dd76bd1",
    "tarball": "https://registry.npmjs.org/once/-/once-1.4.0.tgz"
  },
  "files": [
    "once.js"
  ],
  "gitHead": "0e614d9f5a7e6f0305c625f6b581f6d80b33b8a6",
  "homepage": "https://github.com/isaacs/once#readme",
  "keywords": [
    "once",
    "function",
    "one",
    "single"
  ],
  "license": "ISC",
  "main": "once.js",
  "maintainers": [
    {
      "name": "isaacs",
      "email": "i@izs.me"
    }
  ],
  "name": "once",
  "optionalDependencies": {},
  "readme": "# once\r\n\r\nOnly call a function once.\r\n\r\n## usage\r\n\r\n```javascript\r\nvar once = require('once')\r\n\r\nfunction load (file, cb) {\r\n  cb = once(cb)\r\n  loader.load('file')\r\n  loader.once('load', cb)\r\n  loader.once('error', cb)\r\n}\r\n```\r\n\r\nOr add to the Function.prototype in a responsible way:\r\n\r\n```javascript\r\n// only has to be done once\r\nrequire('once').proto()\r\n\r\nfunction load (file, cb) {\r\n  cb = cb.once()\r\n  loader.load('file')\r\n  loader.once('load', cb)\r\n  loader.once('error', cb)\r\n}\r\n```\r\n\r\nIronically, the prototype feature makes this module twice as\r\ncomplicated as necessary.\r\n\r\nTo check whether you function has been called, use `fn.called`. Once the\r\nfunction is called for the first time the return value of the original\r\nfunction is saved in `fn.value` and subsequent calls will continue to\r\nreturn this value.\r\n\r\n```javascript\r\nvar once = require('once')\r\n\r\nfunction load (cb) {\r\n  cb = once(cb)\r\n  var stream = createStream()\r\n  stream.once('data', cb)\r\n  stream.once('end', function () {\r\n    if (!cb.called) cb(new Error('not found'))\r\n  })\r\n}\r\n```\r\n\r\n## `once.strict(func)`\r\n\r\nThrow an error if the function is called twice.\r\n\r\nSome functions are expected to be called only once. Using `once` for them would\r\npotentially hide logical errors.\r\n\r\nIn the example below, the `greet` function has to call the callback only once:\r\n\r\n```javascript\r\nfunction greet (name, cb) {\r\n  // return is missing from the if statement\r\n  // when no name is passed, the callback is called twice\r\n  if (!name) cb('Hello anonymous')\r\n  cb('Hello ' + name)\r\n}\r\n\r\nfunction log (msg) {\r\n  console.log(msg)\r\n}\r\n\r\n// this will print 'Hello anonymous' but the logical error will be missed\r\ngreet(null, once(msg))\r\n\r\n// once.strict will print 'Hello anonymous' and throw an error when the callback will be called the second time\r\ngreet(null, once.strict(msg))\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/once.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "1.4.0"
}
