{
  "_from": "tmp@0.0.28",
  "_id": "tmp@0.0.28",
  "_location": "/tmp",
  "_nodeVersion": "4.1.1",
  "_npmUser": {
    "name": "raszi",
    "email": "npm@spam.raszi.hu"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requiredBy": [
    "/karma"
  ],
  "_resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.28.tgz",
  "_shasum": "172735b7f614ea7af39664fa84cf0de4e515d120",
  "author": {
    "name": "KARASZI IstvÃ¡n",
    "email": "github@spam.raszi.hu",
    "url": "http://raszi.hu/"
  },
  "bugs": {
    "url": "http://github.com/raszi/node-tmp/issues"
  },
  "dependencies": {
    "os-tmpdir": "~1.0.1"
  },
  "description": "Temporary file and directory creator",
  "devDependencies": {
    "vows": "~0.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "172735b7f614ea7af39664fa84cf0de4e515d120",
    "tarball": "https://registry.npmjs.org/tmp/-/tmp-0.0.28.tgz"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "gitHead": "9fe2a507d8b041c92c83ce1045b83e7283834431",
  "homepage": "http://github.com/raszi/node-tmp",
  "keywords": [
    "temporary",
    "tmp",
    "temp",
    "tempdir",
    "tempfile",
    "tmpdir",
    "tmpfile"
  ],
  "license": "MIT",
  "main": "lib/tmp.js",
  "maintainers": [
    {
      "name": "raszi",
      "email": "npm@spam.raszi.hu"
    }
  ],
  "name": "tmp",
  "optionalDependencies": {},
  "readme": "# Tmp\r\n\r\nA simple temporary file and directory creator for [node.js.][1]\r\n\r\n[![Build Status](https://secure.travis-ci.org/raszi/node-tmp.png?branch=master)](http://travis-ci.org/raszi/node-tmp)\r\n\r\n## About\r\n\r\nThis is a [widely used library][2] to create temporary files and directories\r\nin a [node.js][1] environment.\r\n\r\nTmp offers both an asynchronous and a synchronous API. For all API calls, all\r\nthe parameters are optional.\r\n\r\nTmp uses crypto for determining random file names, or, when using templates,\r\na six letter random identifier. And just in case that you do not have that much\r\nentropy left on your system, Tmp will fall back to pseudo random numbers.\r\n\r\nYou can set whether you want to remove the temporary file on process exit or\r\nnot, and the destination directory can also be set.\r\n\r\n## How to install\r\n\r\n```bash\r\nnpm install tmp\r\n```\r\n\r\n## Usage\r\n\r\n### Asynchronous file creation\r\n\r\nSimple temporary file creation, the file will be closed and unlinked on process exit.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.file(function _tempFileCreated(err, path, fd, cleanupCallback) {\r\n  if (err) throw err;\r\n\r\n  console.log(\"File: \", path);\r\n  console.log(\"Filedescriptor: \", fd);\r\n  \r\n  // If we don't need the file anymore we could manually call the cleanupCallback\r\n  // But that is not necessary if we didn't pass the keep option because the library\r\n  // will clean after itself.\r\n  cleanupCallback();\r\n});\r\n```\r\n\r\n### Synchronous file creation\r\n\r\nA synchronous version of the above.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\nvar tmpobj = tmp.fileSync();\r\nconsole.log(\"File: \", tmpobj.name);\r\nconsole.log(\"Filedescriptor: \", tmpobj.fd);\r\n  \r\n// If we don't need the file anymore we could manually call the removeCallback\r\n// But that is not necessary if we didn't pass the keep option because the library\r\n// will clean after itself.\r\ntmpobj.removeCallback();\r\n```\r\n\r\nNote that this might throw an exception if either the maximum limit of retries\r\nfor creating a temporary name fails, or, in case that you do not have the permission\r\nto write to the directory where the temporary file should be created in.\r\n\r\n### Asynchronous directory creation\r\n\r\nSimple temporary directory creation, it will be removed on process exit.\r\n\r\nIf the directory still contains items on process exit, then it won't be removed.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.dir(function _tempDirCreated(err, path, cleanupCallback) {\r\n  if (err) throw err;\r\n\r\n  console.log(\"Dir: \", path);\r\n  \r\n  // Manual cleanup\r\n  cleanupCallback();\r\n});\r\n```\r\n\r\nIf you want to cleanup the directory even when there are entries in it, then\r\nyou can pass the `unsafeCleanup` option when creating it.\r\n\r\n### Synchronous directory creation\r\n\r\nA synchronous version of the above.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\nvar tmpobj = tmp.dirSync();\r\nconsole.log(\"Dir: \", tmpobj.name);\r\n// Manual cleanup\r\ntmpobj.removeCallback();\r\n```\r\n\r\nNote that this might throw an exception if either the maximum limit of retries\r\nfor creating a temporary name fails, or, in case that you do not have the permission\r\nto write to the directory where the temporary directory should be created in.\r\n\r\n### Asynchronous filename generation\r\n\r\nIt is possible with this library to generate a unique filename in the specified\r\ndirectory.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.tmpName(function _tempNameGenerated(err, path) {\r\n    if (err) throw err;\r\n\r\n    console.log(\"Created temporary filename: \", path);\r\n});\r\n```\r\n\r\n### Synchronous filename generation\r\n\r\nA synchronous version of the above.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\nvar name = tmp.tmpNameSync();\r\nconsole.log(\"Created temporary filename: \", name);\r\n```\r\n\r\n## Advanced usage\r\n\r\n### Asynchronous file creation\r\n\r\nCreates a file with mode `0644`, prefix will be `prefix-` and postfix will be `.txt`.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.file({ mode: 0644, prefix: 'prefix-', postfix: '.txt' }, function _tempFileCreated(err, path, fd) {\r\n  if (err) throw err;\r\n\r\n  console.log(\"File: \", path);\r\n  console.log(\"Filedescriptor: \", fd);\r\n});\r\n```\r\n\r\n### Synchronous file creation\r\n\r\nA synchronous version of the above.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\nvar tmpobj = tmp.fileSync({ mode: 0644, prefix: 'prefix-', postfix: '.txt' });\r\nconsole.log(\"File: \", tmpobj.name);\r\nconsole.log(\"Filedescriptor: \", tmpobj.fd);\r\n```\r\n\r\n### Asynchronous directory creation\r\n\r\nCreates a directory with mode `0755`, prefix will be `myTmpDir_`.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.dir({ mode: 0750, prefix: 'myTmpDir_' }, function _tempDirCreated(err, path) {\r\n  if (err) throw err;\r\n\r\n  console.log(\"Dir: \", path);\r\n});\r\n```\r\n\r\n### Synchronous directory creation\r\n\r\nAgain, a synchronous version of the above.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\nvar tmpobj = tmp.dirSync({ mode: 0750, prefix: 'myTmpDir_' });\r\nconsole.log(\"Dir: \", tmpobj.name);\r\n```\r\n\r\n### mkstemps like, asynchronously\r\n\r\nCreates a new temporary directory with mode `0700` and filename like `/tmp/tmp-nk2J1u`.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.dir({ template: '/tmp/tmp-XXXXXX' }, function _tempDirCreated(err, path) {\r\n  if (err) throw err;\r\n\r\n  console.log(\"Dir: \", path);\r\n});\r\n```\r\n\r\n### mkstemps like, synchronously\r\n\r\nThis will behave similarly to the asynchronous version.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\nvar tmpobj = tmp.dirSync({ template: '/tmp/tmp-XXXXXX' });\r\nconsole.log(\"Dir: \", tmpobj.name);\r\n```\r\n\r\n### Asynchronous filename generation\r\n\r\nThe `tmpName()` function accepts the `prefix`, `postfix`, `dir`, etc. parameters also:\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.tmpName({ template: '/tmp/tmp-XXXXXX' }, function _tempNameGenerated(err, path) {\r\n    if (err) throw err;\r\n\r\n    console.log(\"Created temporary filename: \", path);\r\n});\r\n```\r\n\r\n### Synchronous filename generation\r\n\r\nThe `tmpNameSync()` function works similarly to `tmpName()`.\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\nvar tmpname = tmp.tmpNameSync({ template: '/tmp/tmp-XXXXXX' });\r\nconsole.log(\"Created temporary filename: \", tmpname);\r\n```\r\n\r\n## Graceful cleanup\r\n\r\nOne may want to cleanup the temporary files even when an uncaught exception\r\noccurs. To enforce this, you can call the `setGracefulCleanup()` method:\r\n\r\n```javascript\r\nvar tmp = require('tmp');\r\n\r\ntmp.setGracefulCleanup();\r\n```\r\n\r\n## Options\r\n\r\nAll options are optional :)\r\n\r\n  * `mode`: the file mode to create with, it fallbacks to `0600` on file creation and `0700` on directory creation\r\n  * `prefix`: the optional prefix, fallbacks to `tmp-` if not provided\r\n  * `postfix`: the optional postfix, fallbacks to `.tmp` on file creation\r\n  * `template`: [`mkstemps`][3] like filename template, no default\r\n  * `dir`: the optional temporary directory, fallbacks to system default (guesses from environment)\r\n  * `tries`: how many times should the function try to get a unique filename before giving up, default `3`\r\n  * `keep`: signals that the temporary file or directory should not be deleted on exit, default is `false`, means delete\r\n    * Please keep in mind that it is recommended in this case to call the provided `cleanupCallback` function manually.\r\n  * `unsafeCleanup`: recursively removes the created temporary directory, even when it's not empty. default is `false`\r\n\r\n[1]: http://nodejs.org/\r\n[2]: https://www.npmjs.com/browse/depended/tmp\r\n[3]: http://www.kernel.org/doc/man-pages/online/pages/man3/mkstemp.3.html\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/raszi/node-tmp.git"
  },
  "scripts": {
    "test": "vows test/*-test.js"
  },
  "version": "0.0.28"
}
