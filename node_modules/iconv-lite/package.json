{
  "_from": "iconv-lite@0.4.13",
  "_id": "iconv-lite@0.4.13",
  "_location": "/iconv-lite",
  "_nodeVersion": "4.1.1",
  "_npmUser": {
    "name": "ashtuchkin",
    "email": "ashtuchkin@gmail.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requiredBy": [
    "/body-parser",
    "/raw-body"
  ],
  "_resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.13.tgz",
  "_shasum": "1f88aba4ab0b1508e8312acc39345f36e992e2f2",
  "author": {
    "name": "Alexander Shtuchkin",
    "email": "ashtuchkin@gmail.com"
  },
  "browser": {
    "./extend-node": false,
    "./streams": false
  },
  "bugs": {
    "url": "https://github.com/ashtuchkin/iconv-lite/issues"
  },
  "contributors": [
    {
      "name": "Jinwu Zhan",
      "url": "https://github.com/jenkinv"
    },
    {
      "name": "Adamansky Anton",
      "url": "https://github.com/adamansky"
    },
    {
      "name": "George Stagas",
      "url": "https://github.com/stagas"
    },
    {
      "name": "Mike D Pilsbury",
      "url": "https://github.com/pekim"
    },
    {
      "name": "Niggler",
      "url": "https://github.com/Niggler"
    },
    {
      "name": "wychi",
      "url": "https://github.com/wychi"
    },
    {
      "name": "David Kuo",
      "url": "https://github.com/david50407"
    },
    {
      "name": "ChangZhuo Chen",
      "url": "https://github.com/czchen"
    },
    {
      "name": "Lee Treveil",
      "url": "https://github.com/leetreveil"
    },
    {
      "name": "Brian White",
      "url": "https://github.com/mscdex"
    },
    {
      "name": "Mithgol",
      "url": "https://github.com/Mithgol"
    },
    {
      "name": "Nazar Leush",
      "url": "https://github.com/nleush"
    }
  ],
  "dependencies": {},
  "description": "Convert character encodings in pure javascript.",
  "devDependencies": {
    "async": "*",
    "errto": "*",
    "iconv": "2.1",
    "istanbul": "*",
    "mocha": "*",
    "request": "2.47",
    "unorm": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "1f88aba4ab0b1508e8312acc39345f36e992e2f2",
    "tarball": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.13.tgz"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "gitHead": "f5ec51b1e7dd1477a3570824960641eebdc5fbc6",
  "homepage": "https://github.com/ashtuchkin/iconv-lite",
  "keywords": [
    "iconv",
    "convert",
    "charset",
    "icu"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "ashtuchkin",
      "email": "ashtuchkin@gmail.com"
    }
  ],
  "name": "iconv-lite",
  "optionalDependencies": {},
  "readme": "## Pure JS character encoding conversion [![Build Status](https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master)](https://travis-ci.org/ashtuchkin/iconv-lite)\r\n\r\n * Doesn't need native code compilation. Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\r\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \r\n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\r\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\r\n * Intuitive encode/decode API\r\n * Streaming support for Node v0.10+\r\n * [Deprecated] Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\r\n * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\r\n * License: MIT.\r\n\r\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true)](https://npmjs.org/packages/iconv-lite/)\r\n\r\n## Usage\r\n### Basic API\r\n```javascript\r\nvar iconv = require('iconv-lite');\r\n\r\n// Convert from an encoded buffer to js string.\r\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\r\n\r\n// Convert from js string to an encoded buffer.\r\nbuf = iconv.encode(\"Sample input string\", 'win1251');\r\n\r\n// Check if encoding is supported\r\niconv.encodingExists(\"us-ascii\")\r\n```\r\n\r\n### Streaming API (Node v0.10+)\r\n```javascript\r\n\r\n// Decode stream (from binary stream to js strings)\r\nhttp.createServer(function(req, res) {\r\n    var converterStream = iconv.decodeStream('win1251');\r\n    req.pipe(converterStream);\r\n\r\n    converterStream.on('data', function(str) {\r\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\r\n    });\r\n});\r\n\r\n// Convert encoding streaming example\r\nfs.createReadStream('file-in-win1251.txt')\r\n    .pipe(iconv.decodeStream('win1251'))\r\n    .pipe(iconv.encodeStream('ucs2'))\r\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\r\n\r\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\r\nhttp.createServer(function(req, res) {\r\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\r\n        assert(typeof body == 'string');\r\n        console.log(body); // full request body string\r\n    });\r\n});\r\n```\r\n\r\n### [Deprecated] Extend Node.js own encodings\r\n> NOTE: This doesn't work on latest Node versions. See [details](https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility).\r\n\r\n```javascript\r\n// After this call all Node basic primitives will understand iconv-lite encodings.\r\niconv.extendNodeEncodings();\r\n\r\n// Examples:\r\nbuf = new Buffer(str, 'win1251');\r\nbuf.write(str, 'gbk');\r\nstr = buf.toString('latin1');\r\nassert(Buffer.isEncoding('iso-8859-15'));\r\nBuffer.byteLength(str, 'us-ascii');\r\n\r\nhttp.createServer(function(req, res) {\r\n    req.setEncoding('big5');\r\n    req.collect(function(err, body) {\r\n        console.log(body);\r\n    });\r\n});\r\n\r\nfs.createReadStream(\"file.txt\", \"shift_jis\");\r\n\r\n// External modules are also supported (if they use Node primitives, which they probably do).\r\nrequest = require('request');\r\nrequest({\r\n    url: \"http://github.com/\", \r\n    encoding: \"cp932\"\r\n});\r\n\r\n// To remove extensions\r\niconv.undoExtendNodeEncodings();\r\n```\r\n\r\n## Supported encodings\r\n\r\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\r\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.\r\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \r\n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \r\n    Aliases like 'latin1', 'us-ascii' also supported.\r\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2313, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\r\n\r\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\r\n\r\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\r\n\r\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\r\n\r\n\r\n## Encoding/decoding speed\r\n\r\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \r\nNote: your results may vary, so please always check on your hardware.\r\n\r\n    operation             iconv@2.1.4   iconv-lite@0.4.7\r\n    ----------------------------------------------------------\r\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\r\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\r\n\r\n## BOM handling\r\n\r\n * Decoding: BOM is stripped by default, unless overridden by passing `stripBOM: false` in options\r\n   (f.ex. `iconv.decode(buf, enc, {stripBOM: false})`).\r\n   A callback might also be given as a `stripBOM` parameter - it'll be called if BOM character was actually found.\r\n * Encoding: No BOM added, unless overridden by `addBOM: true` option.\r\n\r\n## UTF-16 Encodings\r\n\r\nThis library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\r\nsmart about endianness in the following ways:\r\n * Decoding: uses BOM and 'spaces heuristic' to determine input endianness. Default is UTF-16LE, but can be \r\n   overridden with `defaultEncoding: 'utf-16be'` option. Strips BOM unless `stripBOM: false`.\r\n * Encoding: uses UTF-16LE and writes BOM by default. Use `addBOM: false` to override.\r\n\r\n## Other notes\r\n\r\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \r\nUntranslatable characters are set to ï¿½ or ?. No transliteration is currently supported.  \r\nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \r\n\r\n## Testing\r\n\r\n```bash\r\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\r\n$ cd iconv-lite\r\n$ npm install\r\n$ npm test\r\n    \r\n$ # To view performance:\r\n$ node test/performance.js\r\n\r\n$ # To view test coverage:\r\n$ npm run coverage\r\n$ open coverage/lcov-report/index.html\r\n```\r\n\r\n## Adoption\r\n[![NPM](https://nodei.co/npm-dl/iconv-lite.png)](https://nodei.co/npm/iconv-lite/)\r\n[![Codeship Status for ashtuchkin/iconv-lite](https://www.codeship.io/projects/81670840-fa72-0131-4520-4a01a6c01acc/status)](https://www.codeship.io/projects/29053)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ashtuchkin/iconv-lite.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha -- --grep .",
    "coverage-open": "open coverage/lcov-report/index.html",
    "test": "mocha --reporter spec --grep ."
  },
  "version": "0.4.13"
}
