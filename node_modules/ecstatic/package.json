{
  "_from": "ecstatic@>=1.4.0 <2.0.0",
  "_id": "ecstatic@1.4.1",
  "_location": "/ecstatic",
  "_nodeVersion": "4.2.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/ecstatic-1.4.1.tgz_1462924279598_0.48026969679631293"
  },
  "_npmUser": {
    "name": "jfhbrook",
    "email": "josh.holbrook@gmail.com"
  },
  "_npmVersion": "2.14.16",
  "_phantomChildren": {},
  "_requiredBy": [
    "/http-server"
  ],
  "_resolved": "https://registry.npmjs.org/ecstatic/-/ecstatic-1.4.1.tgz",
  "_shasum": "32cb7b6fa2e290d58668674d115e8f0c3d567d6a",
  "author": {
    "name": "Joshua Holbrook",
    "email": "josh@nodejitsu.com",
    "url": "http://jesusabdullah.net"
  },
  "bin": {
    "ecstatic": "./lib/ecstatic.js"
  },
  "bugs": {
    "url": "https://github.com/jfhbrook/node-ecstatic/issues"
  },
  "dependencies": {
    "he": "^0.5.0",
    "mime": "^1.2.11",
    "minimist": "^1.1.0",
    "url-join": "^1.0.0"
  },
  "description": "A simple static file server middleware that works with both Express and Flatiron",
  "devDependencies": {
    "eol": "^0.2.0",
    "express": "^4.12.3",
    "mkdirp": "^0.5.0",
    "request": "^2.49.0",
    "tap": "^5.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "32cb7b6fa2e290d58668674d115e8f0c3d567d6a",
    "tarball": "https://registry.npmjs.org/ecstatic/-/ecstatic-1.4.1.tgz"
  },
  "gitHead": "70751198635509a156ad1564296625fc753af89f",
  "homepage": "https://github.com/jfhbrook/node-ecstatic",
  "keywords": [
    "static",
    "web",
    "server",
    "files",
    "mime",
    "middleware"
  ],
  "license": "MIT",
  "main": "./lib/ecstatic.js",
  "maintainers": [
    {
      "name": "jesusabdullah",
      "email": "josh.holbrook@gmail.com"
    },
    {
      "name": "jfhbrook",
      "email": "josh.holbrook@gmail.com"
    }
  ],
  "name": "ecstatic",
  "optionalDependencies": {},
  "readme": "# Ecstatic [![build status](https://secure.travis-ci.org/jfhbrook/node-ecstatic.png)](http://travis-ci.org/jfhbrook/node-ecstatic)\r\n\r\n![](http://imgur.com/vhub5.png)\r\n\r\nA simple static file server middleware. Use it with a raw http server or\r\nexpress/connect!\r\n\r\n# Examples:\r\n\r\n## express 3.0.x\r\n\r\n``` js\r\nvar http = require('http');\r\nvar express = require('express');\r\nvar ecstatic = require('ecstatic');\r\n\r\nvar app = express();\r\napp.use(ecstatic({ root: __dirname + '/public' }));\r\nhttp.createServer(app).listen(8080);\r\n\r\nconsole.log('Listening on :8080');\r\n```\r\n\r\n## stock http server\r\n\r\n``` js\r\nvar http = require('http');\r\nvar ecstatic = require('ecstatic');\r\n\r\nhttp.createServer(\r\n  ecstatic({ root: __dirname + '/public' })\r\n).listen(8080);\r\n\r\nconsole.log('Listening on :8080');\r\n```\r\n### fall through\r\nTo allow fall through to your custom routes:\r\n\r\n```js\r\necstatic({ root: __dirname + '/public', handleError: false })\r\n```\r\n\r\n# API:\r\n\r\n## ecstatic(opts);\r\n\r\nPass ecstatic an options hash, and it will return your middleware!\r\n\r\n```js\r\nvar opts = {\r\n             root               : __dirname + '/public',\r\n             port               : 8000,\r\n             baseDir            : '/',\r\n             cache              : 3600,\r\n             showDir            : true,\r\n             showDotfiles       : true,\r\n             autoIndex          : false,\r\n             humanReadable      : true,\r\n             headers            : {},\r\n             si                 : false,\r\n             defaultExt         : 'html',\r\n             gzip               : false,\r\n             serverHeader       : true,\r\n             contentType        : 'application/octet-stream',\r\n             mimeTypes          : undefined,\r\n             handleOptionsMethod: false\r\n           }\r\n```\r\n\r\nIf `opts` is a string, the string is assigned to the root folder and all other\r\noptions are set to their defaults.\r\n\r\n### `opts.root`\r\n\r\n`opts.root` is the directory you want to serve up.\r\n\r\n### `opts.port`\r\n\r\n`opts.port` is the port you want ecstatic to listen to. Defaults to 8000.\r\n\r\n### `opts.baseDir`\r\n\r\n`opts.baseDir` is `/` by default, but can be changed to allow your static files\r\nto be served off a specific route. For example, if `opts.baseDir === \"blog\"`\r\nand `opts.root = \"./public\"`, requests for `localhost:8080/blog/index.html` will\r\nresolve to `./public/index.html`.\r\n\r\n### `opts.cache`\r\n\r\nCustomize cache control with `opts.cache` , if it is a number then it will set max-age in seconds.\r\nOther wise it will pass through directly to cache-control. Time defaults to 3600 s (ie, 1 hour).\r\n\r\nIf it is a function, it will be executed on every request, and passed the pathname.  Whatever it returns, string or number, will be used as the cache control header like above.\r\n\r\n### `opts.showDir`\r\n\r\nTurn **off** directory listings with `opts.showDir === false`. Defaults to **true**.\r\n\r\n### `opts.showDotfiles`\r\n\r\nExclude dotfiles from directory listings with `opts.showDotfiles === false`. Defaults to **true**.\r\n\r\n### `opts.humanReadable`\r\n\r\nIf showDir is enabled, add human-readable file sizes. Defaults to **true**.\r\nAliases are `humanreadable` and `human-readable`.\r\n\r\n### `opts.headers`\r\n\r\nSet headers on every response. `opts.headers` can be an object mapping string\r\nheader names to string header values, a colon (:) separated string, or an array\r\nof colon separated strings.\r\n\r\n`opts.H` and `opts.header` are aliased to `opts.headers` so that you can use\r\n`-H` and `--header` options to set headers on the command-line like curl:\r\n\r\n``` sh\r\n$ ecstatic ./public -p 5000 -H 'Access-Control-Allow-Origin: *'\r\n```\r\n\r\n### `opts.si`\r\n\r\nIf showDir and humanReadable are enabled, print file sizes with base 1000 instead\r\nof base 1024. Name is inferred from cli options for `ls`. Aliased to `index`, the\r\nequivalent option in Apache.\r\n\r\n### `opts.autoIndex`\r\n\r\nServe `/path/index.html` when `/path/` is requested.\r\nTurn **off** autoIndexing with `opts.autoIndex === false`. Defaults to **true**.\r\n\r\n### `opts.defaultExt`\r\n\r\nTurn on default file extensions with `opts.defaultExt`. If `opts.defaultExt` is\r\ntrue, it will default to `html`. For example if you want a request to `/a-file`\r\nto resolve to `./public/a-file.html`, set this to `true`. If you want\r\n`/a-file` to resolve to `./public/a-file.json` instead, set `opts.defaultExt` to\r\n`json`.\r\n\r\n### `opts.gzip`\r\n\r\nSet `opts.gzip === true` in order to turn on \"gzip mode,\" wherein ecstatic will\r\nserve `./public/some-file.js.gz` in place of `./public/some-file.js` when the\r\ngzipped version exists and ecstatic determines that the behavior is appropriate.\r\n\r\n### `opts.serverHeader`\r\n\r\nSet `opts.serverHeader` to false in order to turn off setting the `Server` header\r\non all responses served by ecstatic.\r\n\r\n### `opts.contentType`\r\n\r\nSet `opts.contentType` in order to change default Content-Type header value.\r\nDefaults to **application/octet-stream**.\r\n\r\n### `opts.mimeTypes`\r\n\r\nAdd new or override one or more mime-types. This affects the HTTP Content-Type header.\r\nCan either be a path to a [`.types`](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types) file or an object hash of type(s).\r\n\r\n    ecstatic({ mimeType: { 'mime-type': ['file_extension', 'file_extension'] } })\r\n\r\n### `opts.handleError`\r\n\r\nTurn **off** handleErrors to allow fall-through with `opts.handleError === false`, Defaults to **true**.\r\n\r\n### `opts.weakEtags`\r\n\r\nSet `opts.weakEtags` to true in order to generate weak etags instead of strong etags. Defaults to **false**. See `opts.weakCompare` as well.\r\n\r\n### `opts.weakCompare`\r\n\r\nTurn **on** weakCompare to allow the weak comparison function for etag validation. Defaults to **false**.\r\nSee https://www.ietf.org/rfc/rfc2616.txt Section 13.3.3 for more details.\r\n\r\n### `opts.handleOptionsMethod`\r\n\r\nSet handleOptionsMethod to true in order to respond to 'OPTIONS' calls with any standard/set headers. Defaults to **false**. Useful for hacking up CORS support.\r\n\r\n### `opts.cors`\r\n\r\nThis is a **convenience** setting which turns on `handleOptionsMethod` and sets the headers **Access-Control-Allow-Origin: \\*** and **Access-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since**. This *should* be enough to quickly make cross-origin resource sharing work between development APIs. More advanced usage can come either from overriding these headers with the headers argument, or by using the `handleOptionsMethod` flag and then setting headers \"manually.\" Alternately, just do it in your app using separate middlewares/abstractions.\r\n\r\nDefaults to **false**.\r\n\r\n## middleware(req, res, next);\r\n\r\nThis works more or less as you'd expect.\r\n\r\n### ecstatic.showDir(folder);\r\n\r\nThis returns another middleware which will attempt to show a directory view. Turning on auto-indexing is roughly equivalent to adding this middleware after an ecstatic middleware with autoindexing disabled.\r\n\r\n### `ecstatic` command\r\n\r\nto start a standalone static http server,\r\nrun `npm install -g ecstatic` and then run `ecstatic [dir?] [options] --port PORT`\r\nall options work as above, passed in [optimist](https://github.com/substack/node-optimist) style.\r\n`port` defaults to `8000`. If a `dir` or `--root dir` argument is not passed, ecsatic will\r\nserve the current dir. Ecstatic also respects the PORT environment variable.\r\n\r\n# Tests:\r\n\r\nEcstatic has a fairly extensive test suite. You can run it with:\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\n# Contribute:\r\n\r\nWithout outside contributions, ecstatic would wither and die! Before\r\ncontributing, take a quick look at the contributing guidelines in\r\n[./CONTRIBUTING.md](./CONTRIBUTING.md) . They're relatively painless, I promise.\r\nFor Windows users, it is especially important to read the [./CONTRIBUTING.md](./CONTRIBUTING.md)\r\nsection as you can **not** clone ecstatic without changing some settings in git.\r\n\r\n# License:\r\n\r\nMIT. See LICENSE.txt. For contributors, see CONTRIBUTORS.md\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jfhbrook/node-ecstatic.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "1.4.1"
}
