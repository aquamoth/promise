{
  "_from": "connect@>=3.3.5 <4.0.0",
  "_id": "connect@3.5.0",
  "_location": "/connect",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/connect-3.5.0.tgz_1473442301794_0.15655543538741767"
  },
  "_npmUser": {
    "name": "dougwilson",
    "email": "doug@somethingdoug.com"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requiredBy": [
    "/karma"
  ],
  "_resolved": "https://registry.npmjs.org/connect/-/connect-3.5.0.tgz",
  "_shasum": "b357525a0b4c1f50599cd983e1d9efeea9677198",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "bugs": {
    "url": "https://github.com/senchalabs/connect/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com"
    },
    {
      "name": "Tim Caswell",
      "email": "tim@creationix.com"
    }
  ],
  "dependencies": {
    "debug": "~2.2.0",
    "finalhandler": "0.5.0",
    "parseurl": "~1.3.1",
    "utils-merge": "1.0.0"
  },
  "description": "High performance middleware framework",
  "devDependencies": {
    "istanbul": "0.4.5",
    "mocha": "3.0.2",
    "supertest": "2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b357525a0b4c1f50599cd983e1d9efeea9677198",
    "tarball": "https://registry.npmjs.org/connect/-/connect-3.5.0.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "LICENSE",
    "History.md",
    "Readme.md",
    "index.js"
  ],
  "gitHead": "fe531d92a4064e8e41ecb02863eaeda7d628439d",
  "homepage": "https://github.com/senchalabs/connect",
  "keywords": [
    "framework",
    "web",
    "middleware",
    "connect",
    "rack"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "jongleberry",
      "email": "jonathanrichardong@gmail.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "connect",
  "optionalDependencies": {},
  "readme": "# Connect\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n[![Gratipay][gratipay-image]][gratipay-url]\r\n\r\n  Connect is an extensible HTTP server framework for [node](http://nodejs.org) using \"plugins\" known as _middleware_.\r\n\r\n```js\r\nvar connect = require('connect');\r\nvar http = require('http');\r\n\r\nvar app = connect();\r\n\r\n// gzip/deflate outgoing responses\r\nvar compression = require('compression');\r\napp.use(compression());\r\n\r\n// store session state in browser cookie\r\nvar cookieSession = require('cookie-session');\r\napp.use(cookieSession({\r\n    keys: ['secret1', 'secret2']\r\n}));\r\n\r\n// parse urlencoded request bodies into req.body\r\nvar bodyParser = require('body-parser');\r\napp.use(bodyParser.urlencoded());\r\n\r\n// respond to all requests\r\napp.use(function(req, res){\r\n  res.end('Hello from Connect!\\n');\r\n});\r\n\r\n//create node.js http server and listen on port\r\nhttp.createServer(app).listen(3000);\r\n```\r\n\r\n## Getting Started\r\n\r\nConnect is a simple framework to glue together various \"middleware\" to handle requests.\r\n\r\n### Install Connect\r\n\r\n```sh\r\n$ npm install connect\r\n```\r\n\r\n### Create an app\r\n\r\nThe main component is a Connect \"app\". This will store all the middleware\r\nadded and is, itself, a function.\r\n\r\n```js\r\nvar app = connect();\r\n```\r\n\r\n### Use middleware\r\n\r\nThe core of Connect is \"using\" middleware. Middleware are added as a \"stack\"\r\nwhere incoming requests will execute each middleware one-by-one until a middleware\r\ndoes not call `next()` within it.\r\n\r\n```js\r\napp.use(function middleware1(req, res, next) {\r\n  // middleware 1\r\n  next();\r\n});\r\napp.use(function middleware2(req, res, next) {\r\n  // middleware 2\r\n  next();\r\n});\r\n```\r\n\r\n### Mount middleware\r\n\r\nThe `.use()` method also takes an optional path string that is matched against\r\nthe beginning of the incoming request URL. This allows for basic routing.\r\n\r\n```js\r\napp.use('/foo', function fooMiddleware(req, res, next) {\r\n  // req.url starts with \"/foo\"\r\n  next();\r\n});\r\napp.use('/bar', function barMiddleware(req, res, next) {\r\n  // req.url starts with \"/bar\"\r\n  next();\r\n});\r\n```\r\n\r\n### Error middleware\r\n\r\nThere are special cases of \"error-handling\" middleware. There are middleware\r\nwhere the function takes exactly 4 arguments. When a middleware passes an error\r\nto `next`, the app will proceed to look for the error middleware that was declared\r\nafter that middleware and invoke it, skipping any error middleware above that\r\nmiddleware and any non-error middleware below.\r\n\r\n```js\r\n// regular middleware\r\napp.use(function (req, res, next) {\r\n  // i had an error\r\n  next(new Error('boom!'));\r\n});\r\n\r\n// error middleware for errors that occurred in middleware\r\n// declared before this\r\napp.use(function onerror(err, req, res, next) {\r\n  // an error occurred!\r\n});\r\n```\r\n\r\n### Create a server from the app\r\n\r\nThe last step is to actually use the Connect app in a server. The `.listen()` method\r\nis a convenience to start a HTTP server.\r\n\r\n```js\r\nvar server = app.listen(port);\r\n```\r\n\r\nThe app itself is really just a function with three arguments, so it can also be handed\r\nto `.createServer()` in Node.js.\r\n\r\n```js\r\nvar server = http.createServer(app);\r\n```\r\n\r\n## Middleware\r\n\r\nThese middleware and libraries are officially supported by the Connect/Express team:\r\n\r\n  - [body-parser](https://www.npmjs.com/package/body-parser) - previous `bodyParser`, `json`, and `urlencoded`. You may also be interested in:\r\n    - [body](https://www.npmjs.com/package/body)\r\n    - [co-body](https://www.npmjs.com/package/co-body)\r\n    - [raw-body](https://www.npmjs.com/package/raw-body)\r\n  - [compression](https://www.npmjs.com/package/compression) - previously `compress`\r\n  - [connect-timeout](https://www.npmjs.com/package/connect-timeout) - previously `timeout`\r\n  - [cookie-parser](https://www.npmjs.com/package/cookie-parser) - previously `cookieParser`\r\n  - [cookie-session](https://www.npmjs.com/package/cookie-session) - previously `cookieSession`\r\n  - [csurf](https://www.npmjs.com/package/csurf) - previously `csrf`\r\n  - [errorhandler](https://www.npmjs.com/package/errorhandler) - previously `error-handler`\r\n  - [express-session](https://www.npmjs.com/package/express-session) - previously `session`\r\n  - [method-override](https://www.npmjs.com/package/method-override) - previously `method-override`\r\n  - [morgan](https://www.npmjs.com/package/morgan) - previously `logger`\r\n  - [response-time](https://www.npmjs.com/package/response-time) - previously `response-time`\r\n  - [serve-favicon](https://www.npmjs.com/package/serve-favicon) - previously `favicon`\r\n  - [serve-index](https://www.npmjs.com/package/serve-index) - previously `directory`\r\n  - [serve-static](https://www.npmjs.com/package/serve-static) - previously `static`\r\n  - [vhost](https://www.npmjs.com/package/vhost) - previously `vhost`\r\n\r\nMost of these are exact ports of their Connect 2.x equivalents. The primary exception is `cookie-session`.\r\n\r\nSome middleware previously included with Connect are no longer supported by the Connect/Express team, are replaced by an alternative module, or should be superseded by a better module. Use one of these alternatives instead:\r\n\r\n  - `cookieParser`\r\n    - [cookies](https://www.npmjs.com/package/cookies) and [keygrip](https://www.npmjs.com/package/keygrip)\r\n  - `limit`\r\n    - [raw-body](https://www.npmjs.com/package/raw-body)\r\n  - `multipart`\r\n    - [connect-multiparty](https://www.npmjs.com/package/connect-multiparty)\r\n    - [connect-busboy](https://www.npmjs.com/package/connect-busboy)\r\n  - `query`\r\n    - [qs](https://www.npmjs.com/package/qs)\r\n  - `staticCache`\r\n    - [st](https://www.npmjs.com/package/st)\r\n    - [connect-static](https://www.npmjs.com/package/connect-static)\r\n\r\nCheckout [http-framework](https://github.com/Raynos/http-framework/wiki/Modules) for many other compatible middleware! \r\n\r\n## Running Tests\r\n\r\n```bash\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Contributors\r\n\r\n https://github.com/senchalabs/connect/graphs/contributors\r\n\r\n## Node Compatibility\r\n\r\n  - Connect `< 1.x` - node `0.2`\r\n  - Connect `1.x` - node `0.4`\r\n  - Connect `< 2.8` - node `0.6`\r\n  - Connect `>= 2.8 < 3` - node `0.8`\r\n  - Connect `>= 3` - node `0.10`, `0.12`; io.js `1.x`, `2.x`\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/connect.svg\r\n[npm-url]: https://npmjs.org/package/connect\r\n[travis-image]: https://img.shields.io/travis/senchalabs/connect/master.svg\r\n[travis-url]: https://travis-ci.org/senchalabs/connect\r\n[coveralls-image]: https://img.shields.io/coveralls/senchalabs/connect/master.svg\r\n[coveralls-url]: https://coveralls.io/r/senchalabs/connect\r\n[downloads-image]: https://img.shields.io/npm/dm/connect.svg\r\n[downloads-url]: https://npmjs.org/package/connect\r\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\r\n[gratipay-url]: https://www.gratipay.com/dougwilson/\r\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/senchalabs/connect.git"
  },
  "scripts": {
    "test": "mocha --require test/support/env --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/"
  },
  "version": "3.5.0"
}
