{
  "_from": "finalhandler@0.5.0",
  "_id": "finalhandler@0.5.0",
  "_location": "/finalhandler",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/finalhandler-0.5.0.tgz_1466028655505_0.19758180482313037"
  },
  "_npmUser": {
    "name": "dougwilson",
    "email": "doug@somethingdoug.com"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requiredBy": [
    "/connect"
  ],
  "_resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-0.5.0.tgz",
  "_shasum": "e9508abece9b6dba871a6942a1d7911b91911ac7",
  "author": {
    "name": "Douglas Christopher Wilson",
    "email": "doug@somethingdoug.com"
  },
  "bugs": {
    "url": "https://github.com/pillarjs/finalhandler/issues"
  },
  "dependencies": {
    "debug": "~2.2.0",
    "escape-html": "~1.0.3",
    "on-finished": "~2.3.0",
    "statuses": "~1.3.0",
    "unpipe": "~1.0.0"
  },
  "description": "Node.js final http responder",
  "devDependencies": {
    "eslint": "2.12.0",
    "eslint-config-standard": "5.3.1",
    "eslint-plugin-promise": "1.3.2",
    "eslint-plugin-standard": "1.3.2",
    "istanbul": "0.4.3",
    "mocha": "2.5.3",
    "readable-stream": "2.1.2",
    "supertest": "1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e9508abece9b6dba871a6942a1d7911b91911ac7",
    "tarball": "https://registry.npmjs.org/finalhandler/-/finalhandler-0.5.0.tgz"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "index.js"
  ],
  "gitHead": "15cc543eb87dd0e2f29e931d86816a6eb348c573",
  "homepage": "https://github.com/pillarjs/finalhandler",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    }
  ],
  "name": "finalhandler",
  "optionalDependencies": {},
  "readme": "# finalhandler\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Node.js Version][node-image]][node-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n\r\nNode.js function to invoke as the final step to respond to HTTP request.\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install finalhandler\r\n```\r\n\r\n## API\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\n```\r\n\r\n### finalhandler(req, res, [options])\r\n\r\nReturns function to be invoked as the final step for the given `req` and `res`.\r\nThis function is to be invoked as `fn(err)`. If `err` is falsy, the handler will\r\nwrite out a 404 response to the `res`. If it is truthy, an error response will\r\nbe written out to the `res`.\r\n\r\nWhen an error is written, the following information is added to the response:\r\n\r\n  * The `res.statusCode` is set from `err.status` (or `err.statusCode`). If\r\n    this value is outside the 4xx or 5xx range, it will be set to 500.\r\n  * The `res.statusMessage` is set according to the status code.\r\n  * The body will be the HTML of the status code message if `env` is\r\n    `'production'`, otherwise will be `err.stack`.\r\n  * Any headers specified in an `err.headers` object.\r\n\r\nThe final handler will also unpipe anything from `req` when it is invoked.\r\n\r\n#### options.env\r\n\r\nBy default, the environment is determined by `NODE_ENV` variable, but it can be\r\noverridden by this option.\r\n\r\n#### options.onerror\r\n\r\nProvide a function to be called with the `err` when it exists. Can be used for\r\nwriting errors to a central location without excessive function generation. Called\r\nas `onerror(err, req, res)`.\r\n\r\n## Examples\r\n\r\n### always 404\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\nvar http = require('http')\r\n\r\nvar server = http.createServer(function (req, res) {\r\n  var done = finalhandler(req, res)\r\n  done()\r\n})\r\n\r\nserver.listen(3000)\r\n```\r\n\r\n### perform simple action\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\nvar fs = require('fs')\r\nvar http = require('http')\r\n\r\nvar server = http.createServer(function (req, res) {\r\n  var done = finalhandler(req, res)\r\n\r\n  fs.readFile('index.html', function (err, buf) {\r\n    if (err) return done(err)\r\n    res.setHeader('Content-Type', 'text/html')\r\n    res.end(buf)\r\n  })\r\n})\r\n\r\nserver.listen(3000)\r\n```\r\n\r\n### use with middleware-style functions\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\nvar http = require('http')\r\nvar serveStatic = require('serve-static')\r\n\r\nvar serve = serveStatic('public')\r\n\r\nvar server = http.createServer(function (req, res) {\r\n  var done = finalhandler(req, res)\r\n  serve(req, res, done)\r\n})\r\n\r\nserver.listen(3000)\r\n```\r\n\r\n### keep log of all errors\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\nvar fs = require('fs')\r\nvar http = require('http')\r\n\r\nvar server = http.createServer(function (req, res) {\r\n  var done = finalhandler(req, res, {onerror: logerror})\r\n\r\n  fs.readFile('index.html', function (err, buf) {\r\n    if (err) return done(err)\r\n    res.setHeader('Content-Type', 'text/html')\r\n    res.end(buf)\r\n  })\r\n})\r\n\r\nserver.listen(3000)\r\n\r\nfunction logerror(err) {\r\n  console.error(err.stack || err.toString())\r\n}\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/finalhandler.svg\r\n[npm-url]: https://npmjs.org/package/finalhandler\r\n[node-image]: https://img.shields.io/node/v/finalhandler.svg\r\n[node-url]: https://nodejs.org/en/download\r\n[travis-image]: https://img.shields.io/travis/pillarjs/finalhandler.svg\r\n[travis-url]: https://travis-ci.org/pillarjs/finalhandler\r\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/finalhandler.svg\r\n[coveralls-url]: https://coveralls.io/r/pillarjs/finalhandler?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/finalhandler.svg\r\n[downloads-url]: https://npmjs.org/package/finalhandler\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pillarjs/finalhandler.git"
  },
  "scripts": {
    "lint": "eslint **/*.js",
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
  },
  "version": "0.5.0"
}
